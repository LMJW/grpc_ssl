# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import bfawstest_pb2 as bfawstest__pb2


class TestAWSServiceStub(object):
  """service, encode a plain text 
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Getdatabase = channel.unary_unary(
        '/awstest.TestAWSService/Getdatabase',
        request_serializer=bfawstest__pb2.awsrequest.SerializeToString,
        response_deserializer=bfawstest__pb2.awsresponse.FromString,
        )


class TestAWSServiceServicer(object):
  """service, encode a plain text 
  """

  def Getdatabase(self, request, context):
    """request a service of encode
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TestAWSServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Getdatabase': grpc.unary_unary_rpc_method_handler(
          servicer.Getdatabase,
          request_deserializer=bfawstest__pb2.awsrequest.FromString,
          response_serializer=bfawstest__pb2.awsresponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'awstest.TestAWSService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
